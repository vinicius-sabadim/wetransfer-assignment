{"version":3,"sources":["components/Spinner/index.ts","components/Spinner/Spinner.tsx","components/Card/index.ts","components/Card/Card.tsx","hooks.js","components/App/index.ts","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Spinner","isUploading","progress","size","stroke","radius","normalizedRadius","circumference","Math","PI","strokeDashoffset","className","height","width","strokeWidth","r","cx","cy","style","strokeDasharray","data-testid","Card","useState","setIsUploading","setProgress","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","percentage","floor","random","newValue","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTACeA,ECW6B,SAAC,GAKtC,IAAD,IAJJC,mBAII,aAHJC,gBAGI,MAHO,EAGP,MAFJC,YAEI,MAFG,IAEH,MADJC,cACI,MADK,GACL,EACEC,EAASF,EAAO,EAChBG,EAAmBD,EAAkB,EAATD,EAC5BG,EAAmC,EAAnBD,EAAuBE,KAAKC,GAC5CC,EAAmBH,EAAiBL,EAAW,IAAOK,EAE5D,OACE,yBACEI,UAAS,6BAAwBV,EAAc,kBAAoB,KAEnE,yBAAKW,OAAQT,EAAMU,MAAOV,EAAMQ,UAAU,gBACxC,4BACEA,UAAU,yBACVG,YAAaV,EACbW,EAAGT,EACHU,GAAIX,EACJY,GAAIZ,IAEN,4BACEM,UAAU,eACVG,YAAaV,EACbW,EAAGT,EACHY,MAAO,CACLC,gBAAgB,GAAD,OAAKZ,EAAL,YAAsBA,GACrCG,iBAAkBA,GAEpBM,GAAIX,EACJY,GAAIZ,KAGR,0BAAMM,UAAU,iBAAiBS,cAAY,oBAC1ClB,KC/CMmB,G,MCSQ,WAAO,IAAD,EACWC,oBAAS,GADpB,mBACpBrB,EADoB,KACPsB,EADO,OAEKD,mBAAS,GAFd,mBAEpBpB,EAFoB,KAEVsB,EAFU,KAwB3B,OChCK,SAAqBC,EAAUC,GACpC,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aAJX,WACEL,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,IDJJQ,EACE,WAEE,IAAMC,EAAa3B,KAAK4B,MAAsB,EAAhB5B,KAAK6B,UAC7BC,EAAWpC,EAAWiC,EACVX,EAAlBc,GAAY,IAAkB,IAAmBA,KAEnDrC,EAdU,IAcY,MAatB,yBAAKU,UAAU,mBACb,kBAAC,EAAD,CAASV,YAAaA,EAAaC,SAAUA,IAC5CD,EACC,4BAAQU,UAAU,eAAe4B,QATvC,WACEhB,GAAe,GACfC,EAAY,KAOR,QAIA,4BAAQb,UAAU,eAAe4B,QAjBvC,WACEhB,GAAe,KAgBX,YEzCOiB,G,MCKO,WACpB,OACE,yBAAK7B,UAAU,kBACb,kBAAC,EAAD,SCGc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e44613d7.chunk.js","sourcesContent":["import Spinner from './Spinner'\nexport default Spinner\n","import React from 'react'\n\nimport './Spinner.css'\n\ninterface SpinnerInterface {\n  isUploading: boolean\n  progress: number\n  size?: number\n  stroke?: number\n}\n\n// Spinner inspired by this post https://css-tricks.com/building-progress-ring-quickly/\nconst Spinner: React.FC<SpinnerInterface> = ({\n  isUploading = false,\n  progress = 0,\n  size = 160,\n  stroke = 12\n}) => {\n  const radius = size / 2\n  const normalizedRadius = radius - stroke * 2\n  const circumference = normalizedRadius * 2 * Math.PI\n  const strokeDashoffset = circumference - (progress / 100) * circumference\n\n  return (\n    <div\n      className={`spinner__container ${isUploading ? 'spinner--active' : ''}`}\n    >\n      <svg height={size} width={size} className=\"spinner__svg\">\n        <circle\n          className=\"spinner__barBackground\"\n          strokeWidth={stroke}\n          r={normalizedRadius}\n          cx={radius}\n          cy={radius}\n        />\n        <circle\n          className=\"spinner__bar\"\n          strokeWidth={stroke}\n          r={normalizedRadius}\n          style={{\n            strokeDasharray: `${circumference} ${circumference}`,\n            strokeDashoffset: strokeDashoffset\n          }}\n          cx={radius}\n          cy={radius}\n        />\n      </svg>\n      <span className=\"spinner__label\" data-testid=\"spinner-progress\">\n        {progress}\n      </span>\n    </div>\n  )\n}\n\nexport default Spinner\n","import Card from './Card'\nexport default Card\n","import React, { useState } from 'react'\n\nimport { useInterval } from '../../hooks'\nimport Spinner from '../Spinner'\n\nimport './Card.css'\n\n// Simulating a progress that takes 100ms for every update.\nconst DELAY = 100\n\nconst Card: React.FC = () => {\n  const [isUploading, setIsUploading] = useState(false)\n  const [progress, setProgress] = useState(0)\n\n  // This useInterval is a hook found in the post https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n  useInterval(\n    () => {\n      // Simulating an update on the progress.\n      const percentage = Math.floor(Math.random() * 5)\n      const newValue = progress + percentage\n      newValue >= 100 ? setProgress(100) : setProgress(newValue)\n    },\n    isUploading ? DELAY : null\n  )\n\n  function startUpload() {\n    setIsUploading(true)\n  }\n\n  function stopUpload() {\n    setIsUploading(false)\n    setProgress(0)\n  }\n\n  return (\n    <div className=\"card__container\">\n      <Spinner isUploading={isUploading} progress={progress} />\n      {isUploading ? (\n        <button className=\"card__button\" onClick={stopUpload}>\n          Stop\n        </button>\n      ) : (\n        <button className=\"card__button\" onClick={startUpload}>\n          Start\n        </button>\n      )}\n    </div>\n  )\n}\n\nexport default Card\n","import { useEffect, useRef } from 'react'\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef()\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n","import App from './App'\nexport default App\n","import React from 'react'\n\nimport Card from '../Card'\n\nimport './App.css'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app__container\">\n      <Card />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}